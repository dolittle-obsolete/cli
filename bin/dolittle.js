#!/usr/bin/env node
'use strict';

var _args = require('args');

var _args2 = _interopRequireDefault(_args);

var _global = require('./global');

var _global2 = _interopRequireDefault(_global);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// * First run - configure default bounded-context language. Store in config file in ~/.dolittle
// * 

var pkg = require('../package.json');
console.log('Dolittle CLI v' + pkg.version + '\n');
var updating = false;
_args2.default.command('update', 'Update all artifacts', function () {
    updating = true;
    _global2.default.boilerPlatesManager.update().then(function () {
        return;
    });
}).command('cluster', 'Work with cluster hosting Dolittle').command('create', 'Create something from one of the boilerplates').command('add', 'Adds an Artifact to the Bounded Context');

_args2.default.parse(process.argv);
var showHelpIfNeeded = function showHelpIfNeeded() {
    if (!_args2.default.sub.length) _args2.default.showHelp();
};

if (!updating && (_global2.default.configManager.isFirstRun || !_global2.default.boilerPlatesManager.hasBoilerPlates)) {
    if (_global2.default.configManager.isFirstRun) _global2.default.logger.info('This is the first time you run this tool, hang on tight while we get it ready');else _global2.default.logger.info('There are no boiler plates, hang on tight while we get it ready');
    _global2.default.boilerPlatesManager.update().then(function () {
        console.log('\n');
        showHelpIfNeeded();
    });
} else {
    showHelpIfNeeded();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL1NvdXJjZS9kb2xpdHRsZS5qcyJdLCJuYW1lcyI6WyJwa2ciLCJyZXF1aXJlIiwiY29uc29sZSIsImxvZyIsInZlcnNpb24iLCJ1cGRhdGluZyIsImFyZ3MiLCJjb21tYW5kIiwiZ2xvYmFsIiwiYm9pbGVyUGxhdGVzTWFuYWdlciIsInVwZGF0ZSIsInRoZW4iLCJwYXJzZSIsInByb2Nlc3MiLCJhcmd2Iiwic2hvd0hlbHBJZk5lZWRlZCIsInN1YiIsImxlbmd0aCIsInNob3dIZWxwIiwiY29uZmlnTWFuYWdlciIsImlzRmlyc3RSdW4iLCJoYXNCb2lsZXJQbGF0ZXMiLCJsb2dnZXIiLCJpbmZvIl0sIm1hcHBpbmdzIjoiOztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBO0FBQ0E7O0FBRUEsSUFBSUEsTUFBTUMsUUFBUSxpQkFBUixDQUFWO0FBQ0FDLFFBQVFDLEdBQVIsb0JBQTZCSCxJQUFJSSxPQUFqQztBQUNBLElBQUlDLFdBQVcsS0FBZjtBQUNBQyxlQUNLQyxPQURMLENBQ2EsUUFEYixFQUN1QixzQkFEdkIsRUFDK0MsWUFBTTtBQUM3Q0YsZUFBVyxJQUFYO0FBQ0FHLHFCQUFPQyxtQkFBUCxDQUEyQkMsTUFBM0IsR0FBb0NDLElBQXBDLENBQXlDLFlBQU07QUFDM0M7QUFDSCxLQUZEO0FBR0gsQ0FOTCxFQU9LSixPQVBMLENBT2EsU0FQYixFQU93QixvQ0FQeEIsRUFRS0EsT0FSTCxDQVFhLFFBUmIsRUFRdUIsK0NBUnZCLEVBU0tBLE9BVEwsQ0FTYSxLQVRiLEVBU29CLHlDQVRwQjs7QUFXQUQsZUFBS00sS0FBTCxDQUFXQyxRQUFRQyxJQUFuQjtBQUNBLElBQUlDLG1CQUFtQixTQUFuQkEsZ0JBQW1CLEdBQU07QUFDekIsUUFBSSxDQUFDVCxlQUFLVSxHQUFMLENBQVNDLE1BQWQsRUFBdUJYLGVBQUtZLFFBQUw7QUFDMUIsQ0FGRDs7QUFJQSxJQUFLLENBQUNiLFFBQUQsS0FDQUcsaUJBQU9XLGFBQVAsQ0FBcUJDLFVBQXJCLElBQW1DLENBQUNaLGlCQUFPQyxtQkFBUCxDQUEyQlksZUFEL0QsQ0FBTCxFQUVNO0FBQ0YsUUFBSWIsaUJBQU9XLGFBQVAsQ0FBcUJDLFVBQXpCLEVBQXNDWixpQkFBT2MsTUFBUCxDQUFjQyxJQUFkLENBQW1CLCtFQUFuQixFQUF0QyxLQUNLZixpQkFBT2MsTUFBUCxDQUFjQyxJQUFkLENBQW1CLGlFQUFuQjtBQUNMZixxQkFBT0MsbUJBQVAsQ0FBMkJDLE1BQTNCLEdBQW9DQyxJQUFwQyxDQUF5QyxZQUFNO0FBQzNDVCxnQkFBUUMsR0FBUixDQUFZLElBQVo7QUFDQVk7QUFDSCxLQUhEO0FBSUgsQ0FURCxNQVNPO0FBQ0hBO0FBQ0giLCJmaWxlIjoiZG9saXR0bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBhcmdzIGZyb20gJ2FyZ3MnO1xuaW1wb3J0IGdsb2JhbCBmcm9tICcuL2dsb2JhbCc7XG5cbi8vICogRmlyc3QgcnVuIC0gY29uZmlndXJlIGRlZmF1bHQgYm91bmRlZC1jb250ZXh0IGxhbmd1YWdlLiBTdG9yZSBpbiBjb25maWcgZmlsZSBpbiB+Ly5kb2xpdHRsZVxuLy8gKiBcblxubGV0IHBrZyA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpO1xuY29uc29sZS5sb2coYERvbGl0dGxlIENMSSB2JHtwa2cudmVyc2lvbn1cXG5gKTtcbmxldCB1cGRhdGluZyA9IGZhbHNlO1xuYXJnc1xuICAgIC5jb21tYW5kKCd1cGRhdGUnLCAnVXBkYXRlIGFsbCBhcnRpZmFjdHMnLCAoKSA9PiB7XG4gICAgICAgIHVwZGF0aW5nID0gdHJ1ZTtcbiAgICAgICAgZ2xvYmFsLmJvaWxlclBsYXRlc01hbmFnZXIudXBkYXRlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0pO1xuICAgIH0pXG4gICAgLmNvbW1hbmQoJ2NsdXN0ZXInLCAnV29yayB3aXRoIGNsdXN0ZXIgaG9zdGluZyBEb2xpdHRsZScpXG4gICAgLmNvbW1hbmQoJ2NyZWF0ZScsICdDcmVhdGUgc29tZXRoaW5nIGZyb20gb25lIG9mIHRoZSBib2lsZXJwbGF0ZXMnKVxuICAgIC5jb21tYW5kKCdhZGQnLCAnQWRkcyBhbiBBcnRpZmFjdCB0byB0aGUgQm91bmRlZCBDb250ZXh0Jyk7XG5cbmFyZ3MucGFyc2UocHJvY2Vzcy5hcmd2KTsgICAgXG5sZXQgc2hvd0hlbHBJZk5lZWRlZCA9ICgpID0+IHtcbiAgICBpZiggIWFyZ3Muc3ViLmxlbmd0aCApIGFyZ3Muc2hvd0hlbHAoKTtcbn1cblxuaWYgKCAhdXBkYXRpbmcgJiYgXG4gICAgKGdsb2JhbC5jb25maWdNYW5hZ2VyLmlzRmlyc3RSdW4gfHwgIWdsb2JhbC5ib2lsZXJQbGF0ZXNNYW5hZ2VyLmhhc0JvaWxlclBsYXRlcylcbiAgICApIHtcbiAgICBpZiggZ2xvYmFsLmNvbmZpZ01hbmFnZXIuaXNGaXJzdFJ1biApIGdsb2JhbC5sb2dnZXIuaW5mbygnVGhpcyBpcyB0aGUgZmlyc3QgdGltZSB5b3UgcnVuIHRoaXMgdG9vbCwgaGFuZyBvbiB0aWdodCB3aGlsZSB3ZSBnZXQgaXQgcmVhZHknKTtcbiAgICBlbHNlIGdsb2JhbC5sb2dnZXIuaW5mbygnVGhlcmUgYXJlIG5vIGJvaWxlciBwbGF0ZXMsIGhhbmcgb24gdGlnaHQgd2hpbGUgd2UgZ2V0IGl0IHJlYWR5Jyk7XG4gICAgZ2xvYmFsLmJvaWxlclBsYXRlc01hbmFnZXIudXBkYXRlKCkudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdcXG4nKTtcbiAgICAgICAgc2hvd0hlbHBJZk5lZWRlZCgpO1xuICAgIH0pO1xufSBlbHNlIHtcbiAgICBzaG93SGVscElmTmVlZGVkKCk7XG59Il19