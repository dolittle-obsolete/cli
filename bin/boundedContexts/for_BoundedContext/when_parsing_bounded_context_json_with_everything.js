'use strict';

var _a_bounded_context_json_with_everything = require('./given/a_bounded_context_json_with_everything');

var _BoundedContext = require('../BoundedContext');

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Dolittle. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
describe('when parsing a bounded context json with everything', function () {
  var context = new _a_bounded_context_json_with_everything.a_bounded_context_json_with_everything();
  /**
   * @type {BoundedContext}
   */
  var result = null;
  var boundedContextObj = JSON.parse(context.boundedContextJson);

  (function (beforeEach) {
    result = new _BoundedContext.BoundedContext(boundedContextObj.application, boundedContextObj.boundedContext, boundedContextObj.boundedContextName, boundedContextObj.core, boundedContextObj.interaction);
  })();
  it('should create a bounded context with the correct application id', function () {
    return result.application.should.equal(context.application);
  });
  it('should create a bounded context with the correct bounded context id', function () {
    return result.boundedContext.should.equal(context.boundedContext);
  });
  it('should create a bounded context with the correct bounded context name', function () {
    return result.boundedContextName.should.equal(context.boundedContextName);
  });
  it('should create a bounded context with the correct core language', function () {
    return result.core.language.should.equal(context.coreLanguage);
  });
  it('should create a bounded context without an interaction layer array', function () {
    return expect(result.interaction).to.be.undefined;
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL1NvdXJjZS9ib3VuZGVkQ29udGV4dHMvZm9yX0JvdW5kZWRDb250ZXh0L3doZW5fcGFyc2luZ19ib3VuZGVkX2NvbnRleHRfanNvbl93aXRoX2V2ZXJ5dGhpbmcuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJjb250ZXh0IiwiYV9ib3VuZGVkX2NvbnRleHRfanNvbl93aXRoX2V2ZXJ5dGhpbmciLCJyZXN1bHQiLCJib3VuZGVkQ29udGV4dE9iaiIsIkpTT04iLCJwYXJzZSIsImJvdW5kZWRDb250ZXh0SnNvbiIsIkJvdW5kZWRDb250ZXh0IiwiYXBwbGljYXRpb24iLCJib3VuZGVkQ29udGV4dCIsImJvdW5kZWRDb250ZXh0TmFtZSIsImNvcmUiLCJpbnRlcmFjdGlvbiIsIml0Iiwic2hvdWxkIiwiZXF1YWwiLCJsYW5ndWFnZSIsImNvcmVMYW5ndWFnZSIsImV4cGVjdCIsInRvIiwiYmUiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiI7O0FBSUE7O0FBQ0E7O0FBTEE7Ozs7QUFPQUEsU0FBUyxxREFBVCxFQUFnRSxZQUFNO0FBQ2xFLE1BQUlDLFVBQVUsSUFBSUMsOEVBQUosRUFBZDtBQUNBOzs7QUFHQSxNQUFJQyxTQUFTLElBQWI7QUFDQSxNQUFJQyxvQkFBb0JDLEtBQUtDLEtBQUwsQ0FBV0wsUUFBUU0sa0JBQW5CLENBQXhCOztBQUdBLEdBQUMsc0JBQWM7QUFDWEosYUFBUyxJQUFJSyw4QkFBSixDQUFtQkosa0JBQWtCSyxXQUFyQyxFQUFrREwsa0JBQWtCTSxjQUFwRSxFQUFvRk4sa0JBQWtCTyxrQkFBdEcsRUFBMEhQLGtCQUFrQlEsSUFBNUksRUFBa0pSLGtCQUFrQlMsV0FBcEssQ0FBVDtBQUNILEdBRkQ7QUFHQUMsS0FBRyxpRUFBSCxFQUFzRTtBQUFBLFdBQU1YLE9BQU9NLFdBQVAsQ0FBbUJNLE1BQW5CLENBQTBCQyxLQUExQixDQUFnQ2YsUUFBUVEsV0FBeEMsQ0FBTjtBQUFBLEdBQXRFO0FBQ0FLLEtBQUcscUVBQUgsRUFBMEU7QUFBQSxXQUFNWCxPQUFPTyxjQUFQLENBQXNCSyxNQUF0QixDQUE2QkMsS0FBN0IsQ0FBbUNmLFFBQVFTLGNBQTNDLENBQU47QUFBQSxHQUExRTtBQUNBSSxLQUFHLHVFQUFILEVBQTRFO0FBQUEsV0FBTVgsT0FBT1Esa0JBQVAsQ0FBMEJJLE1BQTFCLENBQWlDQyxLQUFqQyxDQUF1Q2YsUUFBUVUsa0JBQS9DLENBQU47QUFBQSxHQUE1RTtBQUNBRyxLQUFHLGdFQUFILEVBQXFFO0FBQUEsV0FBTVgsT0FBT1MsSUFBUCxDQUFZSyxRQUFaLENBQXFCRixNQUFyQixDQUE0QkMsS0FBNUIsQ0FBa0NmLFFBQVFpQixZQUExQyxDQUFOO0FBQUEsR0FBckU7QUFDQUosS0FBRyxvRUFBSCxFQUF5RTtBQUFBLFdBQU1LLE9BQU9oQixPQUFPVSxXQUFkLEVBQTJCTyxFQUEzQixDQUE4QkMsRUFBOUIsQ0FBaUNDLFNBQXZDO0FBQUEsR0FBekU7QUFFSCxDQWxCRCIsImZpbGUiOiJ3aGVuX3BhcnNpbmdfYm91bmRlZF9jb250ZXh0X2pzb25fd2l0aF9ldmVyeXRoaW5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIERvbGl0dGxlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgYV9ib3VuZGVkX2NvbnRleHRfanNvbl93aXRoX2V2ZXJ5dGhpbmcgfSBmcm9tICcuL2dpdmVuL2FfYm91bmRlZF9jb250ZXh0X2pzb25fd2l0aF9ldmVyeXRoaW5nJztcbmltcG9ydCB7IEJvdW5kZWRDb250ZXh0IH0gZnJvbSAnLi4vQm91bmRlZENvbnRleHQnO1xuXG5kZXNjcmliZSgnd2hlbiBwYXJzaW5nIGEgYm91bmRlZCBjb250ZXh0IGpzb24gd2l0aCBldmVyeXRoaW5nJywgKCkgPT4ge1xuICAgIGxldCBjb250ZXh0ID0gbmV3IGFfYm91bmRlZF9jb250ZXh0X2pzb25fd2l0aF9ldmVyeXRoaW5nKCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0JvdW5kZWRDb250ZXh0fVxuICAgICAqL1xuICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgIGxldCBib3VuZGVkQ29udGV4dE9iaiA9IEpTT04ucGFyc2UoY29udGV4dC5ib3VuZGVkQ29udGV4dEpzb24pO1xuXG5cbiAgICAoYmVmb3JlRWFjaCA9PiB7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBCb3VuZGVkQ29udGV4dChib3VuZGVkQ29udGV4dE9iai5hcHBsaWNhdGlvbiwgYm91bmRlZENvbnRleHRPYmouYm91bmRlZENvbnRleHQsIGJvdW5kZWRDb250ZXh0T2JqLmJvdW5kZWRDb250ZXh0TmFtZSwgYm91bmRlZENvbnRleHRPYmouY29yZSwgYm91bmRlZENvbnRleHRPYmouaW50ZXJhY3Rpb24pO1xuICAgIH0pKCk7XG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBib3VuZGVkIGNvbnRleHQgd2l0aCB0aGUgY29ycmVjdCBhcHBsaWNhdGlvbiBpZCcsICgpID0+IHJlc3VsdC5hcHBsaWNhdGlvbi5zaG91bGQuZXF1YWwoY29udGV4dC5hcHBsaWNhdGlvbikpO1xuICAgIGl0KCdzaG91bGQgY3JlYXRlIGEgYm91bmRlZCBjb250ZXh0IHdpdGggdGhlIGNvcnJlY3QgYm91bmRlZCBjb250ZXh0IGlkJywgKCkgPT4gcmVzdWx0LmJvdW5kZWRDb250ZXh0LnNob3VsZC5lcXVhbChjb250ZXh0LmJvdW5kZWRDb250ZXh0KSk7XG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBib3VuZGVkIGNvbnRleHQgd2l0aCB0aGUgY29ycmVjdCBib3VuZGVkIGNvbnRleHQgbmFtZScsICgpID0+IHJlc3VsdC5ib3VuZGVkQ29udGV4dE5hbWUuc2hvdWxkLmVxdWFsKGNvbnRleHQuYm91bmRlZENvbnRleHROYW1lKSk7XG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBib3VuZGVkIGNvbnRleHQgd2l0aCB0aGUgY29ycmVjdCBjb3JlIGxhbmd1YWdlJywgKCkgPT4gcmVzdWx0LmNvcmUubGFuZ3VhZ2Uuc2hvdWxkLmVxdWFsKGNvbnRleHQuY29yZUxhbmd1YWdlKSk7XG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBib3VuZGVkIGNvbnRleHQgd2l0aG91dCBhbiBpbnRlcmFjdGlvbiBsYXllciBhcnJheScsICgpID0+IGV4cGVjdChyZXN1bHQuaW50ZXJhY3Rpb24pLnRvLmJlLnVuZGVmaW5lZCk7XG4gICAgXG59KTsiXX0=