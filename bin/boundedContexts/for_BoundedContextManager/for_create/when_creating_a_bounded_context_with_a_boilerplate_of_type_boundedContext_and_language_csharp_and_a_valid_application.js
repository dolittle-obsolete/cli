'use strict';

var _a_system_with_one_bounded_context_boilerplate_for_csharp_and_an_application = require('./given/a_system_with_one_bounded_context_boilerplate_for_csharp_and_an_application');

describe('when_creating_a_bounded_context_with_a_boilerplate_of_type_boundedContext_and_language_csharp_and_a_valid_application', function () {
    var context = new _a_system_with_one_bounded_context_boilerplate_for_csharp_and_an_application.a_system_with_one_bounded_context_boilerplate_for_csharp_and_an_application();
    var path = require('path');

    (function (beforeEach) {
        context.boundedContextManager.create(context.context);
    })();
    it('should call applicationManager.getApplicationFrom with the correct destination', function () {
        return context.applicationManager.getApplicationFrom.should.be.calledWith(context.context.destination);
    });
    it('should call boilerPlatesManager.boilerPlatesByLanguageAndType with csharp and boundedContext', function () {
        return context.boilerPlatesManager.boilerPlatesByLanguageAndType.should.be.calledWith('csharp', 'boundedContext');
    });
    it('should call folders.makeFolderIfNotExists with the correct path', function () {
        return context.folders.makeFolderIfNotExists.should.be.calledWith(path.join(context.context.destination, context.context.name));
    });
    it('should call boilerPlatesManager.createInstance with the boilerplate, correct path and templatecontext', function () {
        return context.boilerPlatesManager.createInstance.should.be.calledWith(context.boilerPlates[0], path.join(context.context.destination, context.context.name));
    });
}); /*---------------------------------------------------------------------------------------------
     *  Copyright (c) Dolittle. All rights reserved.
     *  Licensed under the MIT License. See LICENSE in the project root for license information.
     *--------------------------------------------------------------------------------------------*/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL1NvdXJjZS9ib3VuZGVkQ29udGV4dHMvZm9yX0JvdW5kZWRDb250ZXh0TWFuYWdlci9mb3JfY3JlYXRlL3doZW5fY3JlYXRpbmdfYV9ib3VuZGVkX2NvbnRleHRfd2l0aF9hX2JvaWxlcnBsYXRlX29mX3R5cGVfYm91bmRlZENvbnRleHRfYW5kX2xhbmd1YWdlX2NzaGFycF9hbmRfYV92YWxpZF9hcHBsaWNhdGlvbi5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsImNvbnRleHQiLCJhX3N5c3RlbV93aXRoX29uZV9ib3VuZGVkX2NvbnRleHRfYm9pbGVycGxhdGVfZm9yX2NzaGFycF9hbmRfYW5fYXBwbGljYXRpb24iLCJwYXRoIiwicmVxdWlyZSIsImJvdW5kZWRDb250ZXh0TWFuYWdlciIsImNyZWF0ZSIsIml0IiwiYXBwbGljYXRpb25NYW5hZ2VyIiwiZ2V0QXBwbGljYXRpb25Gcm9tIiwic2hvdWxkIiwiYmUiLCJjYWxsZWRXaXRoIiwiZGVzdGluYXRpb24iLCJib2lsZXJQbGF0ZXNNYW5hZ2VyIiwiYm9pbGVyUGxhdGVzQnlMYW5ndWFnZUFuZFR5cGUiLCJmb2xkZXJzIiwibWFrZUZvbGRlcklmTm90RXhpc3RzIiwiam9pbiIsIm5hbWUiLCJjcmVhdGVJbnN0YW5jZSIsImJvaWxlclBsYXRlcyJdLCJtYXBwaW5ncyI6Ijs7QUFJQTs7QUFFQUEsU0FBUyx1SEFBVCxFQUFrSSxZQUFNO0FBQ3BJLFFBQUlDLFVBQVUsSUFBSUMsd0pBQUosRUFBZDtBQUNBLFFBQU1DLE9BQU9DLFFBQVEsTUFBUixDQUFiOztBQUdBLEtBQUMsc0JBQWM7QUFDWEgsZ0JBQVFJLHFCQUFSLENBQThCQyxNQUE5QixDQUFxQ0wsUUFBUUEsT0FBN0M7QUFDSCxLQUZEO0FBR0FNLE9BQUcsZ0ZBQUgsRUFBcUY7QUFBQSxlQUFNTixRQUFRTyxrQkFBUixDQUEyQkMsa0JBQTNCLENBQThDQyxNQUE5QyxDQUFxREMsRUFBckQsQ0FBd0RDLFVBQXhELENBQW1FWCxRQUFRQSxPQUFSLENBQWdCWSxXQUFuRixDQUFOO0FBQUEsS0FBckY7QUFDQU4sT0FBRyw4RkFBSCxFQUFtRztBQUFBLGVBQU1OLFFBQVFhLG1CQUFSLENBQTRCQyw2QkFBNUIsQ0FBMERMLE1BQTFELENBQWlFQyxFQUFqRSxDQUFvRUMsVUFBcEUsQ0FBK0UsUUFBL0UsRUFBeUYsZ0JBQXpGLENBQU47QUFBQSxLQUFuRztBQUNBTCxPQUFHLGlFQUFILEVBQXNFO0FBQUEsZUFBTU4sUUFBUWUsT0FBUixDQUFnQkMscUJBQWhCLENBQXNDUCxNQUF0QyxDQUE2Q0MsRUFBN0MsQ0FBZ0RDLFVBQWhELENBQTJEVCxLQUFLZSxJQUFMLENBQVVqQixRQUFRQSxPQUFSLENBQWdCWSxXQUExQixFQUF1Q1osUUFBUUEsT0FBUixDQUFnQmtCLElBQXZELENBQTNELENBQU47QUFBQSxLQUF0RTtBQUNBWixPQUFHLHVHQUFILEVBQTRHO0FBQUEsZUFBTU4sUUFBUWEsbUJBQVIsQ0FBNEJNLGNBQTVCLENBQTJDVixNQUEzQyxDQUFrREMsRUFBbEQsQ0FBcURDLFVBQXJELENBQWdFWCxRQUFRb0IsWUFBUixDQUFxQixDQUFyQixDQUFoRSxFQUF5RmxCLEtBQUtlLElBQUwsQ0FBVWpCLFFBQVFBLE9BQVIsQ0FBZ0JZLFdBQTFCLEVBQXVDWixRQUFRQSxPQUFSLENBQWdCa0IsSUFBdkQsQ0FBekYsQ0FBTjtBQUFBLEtBQTVHO0FBQ0gsQ0FaRCxFLENBTkEiLCJmaWxlIjoid2hlbl9jcmVhdGluZ19hX2JvdW5kZWRfY29udGV4dF93aXRoX2FfYm9pbGVycGxhdGVfb2ZfdHlwZV9ib3VuZGVkQ29udGV4dF9hbmRfbGFuZ3VhZ2VfY3NoYXJwX2FuZF9hX3ZhbGlkX2FwcGxpY2F0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIERvbGl0dGxlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgYV9zeXN0ZW1fd2l0aF9vbmVfYm91bmRlZF9jb250ZXh0X2JvaWxlcnBsYXRlX2Zvcl9jc2hhcnBfYW5kX2FuX2FwcGxpY2F0aW9uIH0gZnJvbSAnLi9naXZlbi9hX3N5c3RlbV93aXRoX29uZV9ib3VuZGVkX2NvbnRleHRfYm9pbGVycGxhdGVfZm9yX2NzaGFycF9hbmRfYW5fYXBwbGljYXRpb24nO1xuXG5kZXNjcmliZSgnd2hlbl9jcmVhdGluZ19hX2JvdW5kZWRfY29udGV4dF93aXRoX2FfYm9pbGVycGxhdGVfb2ZfdHlwZV9ib3VuZGVkQ29udGV4dF9hbmRfbGFuZ3VhZ2VfY3NoYXJwX2FuZF9hX3ZhbGlkX2FwcGxpY2F0aW9uJywgKCkgPT4ge1xuICAgIGxldCBjb250ZXh0ID0gbmV3IGFfc3lzdGVtX3dpdGhfb25lX2JvdW5kZWRfY29udGV4dF9ib2lsZXJwbGF0ZV9mb3JfY3NoYXJwX2FuZF9hbl9hcHBsaWNhdGlvbigpO1xuICAgIGNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cblxuICAgIChiZWZvcmVFYWNoID0+IHtcbiAgICAgICAgY29udGV4dC5ib3VuZGVkQ29udGV4dE1hbmFnZXIuY3JlYXRlKGNvbnRleHQuY29udGV4dCk7XG4gICAgfSkoKTtcbiAgICBpdCgnc2hvdWxkIGNhbGwgYXBwbGljYXRpb25NYW5hZ2VyLmdldEFwcGxpY2F0aW9uRnJvbSB3aXRoIHRoZSBjb3JyZWN0IGRlc3RpbmF0aW9uJywgKCkgPT4gY29udGV4dC5hcHBsaWNhdGlvbk1hbmFnZXIuZ2V0QXBwbGljYXRpb25Gcm9tLnNob3VsZC5iZS5jYWxsZWRXaXRoKGNvbnRleHQuY29udGV4dC5kZXN0aW5hdGlvbikpO1xuICAgIGl0KCdzaG91bGQgY2FsbCBib2lsZXJQbGF0ZXNNYW5hZ2VyLmJvaWxlclBsYXRlc0J5TGFuZ3VhZ2VBbmRUeXBlIHdpdGggY3NoYXJwIGFuZCBib3VuZGVkQ29udGV4dCcsICgpID0+IGNvbnRleHQuYm9pbGVyUGxhdGVzTWFuYWdlci5ib2lsZXJQbGF0ZXNCeUxhbmd1YWdlQW5kVHlwZS5zaG91bGQuYmUuY2FsbGVkV2l0aCgnY3NoYXJwJywgJ2JvdW5kZWRDb250ZXh0JykpO1xuICAgIGl0KCdzaG91bGQgY2FsbCBmb2xkZXJzLm1ha2VGb2xkZXJJZk5vdEV4aXN0cyB3aXRoIHRoZSBjb3JyZWN0IHBhdGgnLCAoKSA9PiBjb250ZXh0LmZvbGRlcnMubWFrZUZvbGRlcklmTm90RXhpc3RzLnNob3VsZC5iZS5jYWxsZWRXaXRoKHBhdGguam9pbihjb250ZXh0LmNvbnRleHQuZGVzdGluYXRpb24sIGNvbnRleHQuY29udGV4dC5uYW1lKSkpO1xuICAgIGl0KCdzaG91bGQgY2FsbCBib2lsZXJQbGF0ZXNNYW5hZ2VyLmNyZWF0ZUluc3RhbmNlIHdpdGggdGhlIGJvaWxlcnBsYXRlLCBjb3JyZWN0IHBhdGggYW5kIHRlbXBsYXRlY29udGV4dCcsICgpID0+IGNvbnRleHQuYm9pbGVyUGxhdGVzTWFuYWdlci5jcmVhdGVJbnN0YW5jZS5zaG91bGQuYmUuY2FsbGVkV2l0aChjb250ZXh0LmJvaWxlclBsYXRlc1swXSwgcGF0aC5qb2luKGNvbnRleHQuY29udGV4dC5kZXN0aW5hdGlvbiwgY29udGV4dC5jb250ZXh0Lm5hbWUpKSk7XG59KTsiXX0=