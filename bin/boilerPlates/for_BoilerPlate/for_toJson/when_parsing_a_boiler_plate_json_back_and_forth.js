'use strict';

var _a_boiler_plate_json = require('./given/a_boiler_plate_json');

var _BoilerPlate = require('../../BoilerPlate');

describe('when parsing a boiler plate json back and forth', function () {
    var context = new _a_boiler_plate_json.a_boiler_plate_json();
    var boilerPlateObject = {};
    var jsonResult = '';
    (function (beforeEach) {
        boilerPlateObject = JSON.parse(context.boilerPlateJson);
        var boilerPlateResult = new _BoilerPlate.BoilerPlate(boilerPlateObject.language, boilerPlateObject.name, boilerPlateObject.description, boilerPlateObject.type, boilerPlateObject.dependencies, boilerPlateObject.location, boilerPlateObject.pathsNeedingBinding || [], boilerPlateObject.filesNeedingBinding || []);
        jsonResult = boilerPlateResult.toJson();
    })();
    console.log(jsonResult);
    console.log(JSON.parse(context.boilerPlateJson));
    it('should have the same name', function () {
        return jsonResult.name.should.equal(boilerPlateObject.name);
    });
    it('should have the same language', function () {
        return jsonResult.language.should.equal(boilerPlateObject.language);
    });
    it('should have the same description', function () {
        return jsonResult.description.should.equal(boilerPlateObject.description);
    });
    it('should have the same type', function () {
        return jsonResult.type.should.equal(boilerPlateObject.type);
    });
    it('should have the same dependencies', function () {
        return jsonResult.dependencies.should.equal(boilerPlateObject.dependencies);
    });
    it('should have the same location', function () {
        return jsonResult.location.should.equal(boilerPlateObject.location);
    });
    it('should have the same pathsNeedingBinding', function () {
        return jsonResult.pathsNeedingBinding.should.equal(boilerPlateObject.pathsNeedingBinding);
    });
    it('should have the same filesNeedingBinding', function () {
        return jsonResult.filesNeedingBinding.should.equal(boilerPlateObject.filesNeedingBinding);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL1NvdXJjZS9ib2lsZXJQbGF0ZXMvZm9yX0JvaWxlclBsYXRlL2Zvcl90b0pzb24vd2hlbl9wYXJzaW5nX2FfYm9pbGVyX3BsYXRlX2pzb25fYmFja19hbmRfZm9ydGguanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJjb250ZXh0IiwiYV9ib2lsZXJfcGxhdGVfanNvbiIsImJvaWxlclBsYXRlT2JqZWN0IiwianNvblJlc3VsdCIsIkpTT04iLCJwYXJzZSIsImJvaWxlclBsYXRlSnNvbiIsImJvaWxlclBsYXRlUmVzdWx0IiwiQm9pbGVyUGxhdGUiLCJsYW5ndWFnZSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInR5cGUiLCJkZXBlbmRlbmNpZXMiLCJsb2NhdGlvbiIsInBhdGhzTmVlZGluZ0JpbmRpbmciLCJmaWxlc05lZWRpbmdCaW5kaW5nIiwidG9Kc29uIiwiY29uc29sZSIsImxvZyIsIml0Iiwic2hvdWxkIiwiZXF1YWwiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0FBLFNBQVMsaURBQVQsRUFBNEQsWUFBTTtBQUM5RCxRQUFJQyxVQUFVLElBQUlDLHdDQUFKLEVBQWQ7QUFDQSxRQUFJQyxvQkFBb0IsRUFBeEI7QUFDQSxRQUFJQyxhQUFhLEVBQWpCO0FBQ0EsS0FBQyxzQkFBYztBQUNYRCw0QkFBb0JFLEtBQUtDLEtBQUwsQ0FBV0wsUUFBUU0sZUFBbkIsQ0FBcEI7QUFDQSxZQUFJQyxvQkFBb0IsSUFBSUMsd0JBQUosQ0FDcEJOLGtCQUFrQk8sUUFERSxFQUVwQlAsa0JBQWtCUSxJQUZFLEVBR3BCUixrQkFBa0JTLFdBSEUsRUFJcEJULGtCQUFrQlUsSUFKRSxFQUtwQlYsa0JBQWtCVyxZQUxFLEVBTXBCWCxrQkFBa0JZLFFBTkUsRUFPcEJaLGtCQUFrQmEsbUJBQWxCLElBQXlDLEVBUHJCLEVBUXBCYixrQkFBa0JjLG1CQUFsQixJQUF5QyxFQVJyQixDQUF4QjtBQVNBYixxQkFBYUksa0JBQWtCVSxNQUFsQixFQUFiO0FBQ0gsS0FaRDtBQWFBQyxZQUFRQyxHQUFSLENBQVloQixVQUFaO0FBQ0FlLFlBQVFDLEdBQVIsQ0FBWWYsS0FBS0MsS0FBTCxDQUFXTCxRQUFRTSxlQUFuQixDQUFaO0FBQ0FjLE9BQUcsMkJBQUgsRUFBZ0M7QUFBQSxlQUFNakIsV0FBV08sSUFBWCxDQUFnQlcsTUFBaEIsQ0FBdUJDLEtBQXZCLENBQTZCcEIsa0JBQWtCUSxJQUEvQyxDQUFOO0FBQUEsS0FBaEM7QUFDQVUsT0FBRywrQkFBSCxFQUFvQztBQUFBLGVBQU1qQixXQUFXTSxRQUFYLENBQW9CWSxNQUFwQixDQUEyQkMsS0FBM0IsQ0FBaUNwQixrQkFBa0JPLFFBQW5ELENBQU47QUFBQSxLQUFwQztBQUNBVyxPQUFHLGtDQUFILEVBQXVDO0FBQUEsZUFBTWpCLFdBQVdRLFdBQVgsQ0FBdUJVLE1BQXZCLENBQThCQyxLQUE5QixDQUFvQ3BCLGtCQUFrQlMsV0FBdEQsQ0FBTjtBQUFBLEtBQXZDO0FBQ0FTLE9BQUcsMkJBQUgsRUFBZ0M7QUFBQSxlQUFNakIsV0FBV1MsSUFBWCxDQUFnQlMsTUFBaEIsQ0FBdUJDLEtBQXZCLENBQTZCcEIsa0JBQWtCVSxJQUEvQyxDQUFOO0FBQUEsS0FBaEM7QUFDQVEsT0FBRyxtQ0FBSCxFQUF3QztBQUFBLGVBQU1qQixXQUFXVSxZQUFYLENBQXdCUSxNQUF4QixDQUErQkMsS0FBL0IsQ0FBcUNwQixrQkFBa0JXLFlBQXZELENBQU47QUFBQSxLQUF4QztBQUNBTyxPQUFHLCtCQUFILEVBQW9DO0FBQUEsZUFBTWpCLFdBQVdXLFFBQVgsQ0FBb0JPLE1BQXBCLENBQTJCQyxLQUEzQixDQUFpQ3BCLGtCQUFrQlksUUFBbkQsQ0FBTjtBQUFBLEtBQXBDO0FBQ0FNLE9BQUcsMENBQUgsRUFBK0M7QUFBQSxlQUFNakIsV0FBV1ksbUJBQVgsQ0FBK0JNLE1BQS9CLENBQXNDQyxLQUF0QyxDQUE0Q3BCLGtCQUFrQmEsbUJBQTlELENBQU47QUFBQSxLQUEvQztBQUNBSyxPQUFHLDBDQUFILEVBQStDO0FBQUEsZUFBTWpCLFdBQVdhLG1CQUFYLENBQStCSyxNQUEvQixDQUFzQ0MsS0FBdEMsQ0FBNENwQixrQkFBa0JjLG1CQUE5RCxDQUFOO0FBQUEsS0FBL0M7QUFDSCxDQTNCRCIsImZpbGUiOiJ3aGVuX3BhcnNpbmdfYV9ib2lsZXJfcGxhdGVfanNvbl9iYWNrX2FuZF9mb3J0aC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFfYm9pbGVyX3BsYXRlX2pzb24gfSBmcm9tICcuL2dpdmVuL2FfYm9pbGVyX3BsYXRlX2pzb24nXG5pbXBvcnQgeyBCb2lsZXJQbGF0ZSB9IGZyb20gJy4uLy4uL0JvaWxlclBsYXRlJztcbmRlc2NyaWJlKCd3aGVuIHBhcnNpbmcgYSBib2lsZXIgcGxhdGUganNvbiBiYWNrIGFuZCBmb3J0aCcsICgpID0+IHtcbiAgICBsZXQgY29udGV4dCA9IG5ldyBhX2JvaWxlcl9wbGF0ZV9qc29uKCk7XG4gICAgbGV0IGJvaWxlclBsYXRlT2JqZWN0ID0ge307XG4gICAgbGV0IGpzb25SZXN1bHQgPSAnJztcbiAgICAoYmVmb3JlRWFjaCA9PiB7XG4gICAgICAgIGJvaWxlclBsYXRlT2JqZWN0ID0gSlNPTi5wYXJzZShjb250ZXh0LmJvaWxlclBsYXRlSnNvbik7XG4gICAgICAgIGxldCBib2lsZXJQbGF0ZVJlc3VsdCA9IG5ldyBCb2lsZXJQbGF0ZShcbiAgICAgICAgICAgIGJvaWxlclBsYXRlT2JqZWN0Lmxhbmd1YWdlLFxuICAgICAgICAgICAgYm9pbGVyUGxhdGVPYmplY3QubmFtZSxcbiAgICAgICAgICAgIGJvaWxlclBsYXRlT2JqZWN0LmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgYm9pbGVyUGxhdGVPYmplY3QudHlwZSxcbiAgICAgICAgICAgIGJvaWxlclBsYXRlT2JqZWN0LmRlcGVuZGVuY2llcyxcbiAgICAgICAgICAgIGJvaWxlclBsYXRlT2JqZWN0LmxvY2F0aW9uLFxuICAgICAgICAgICAgYm9pbGVyUGxhdGVPYmplY3QucGF0aHNOZWVkaW5nQmluZGluZyB8fCBbXSxcbiAgICAgICAgICAgIGJvaWxlclBsYXRlT2JqZWN0LmZpbGVzTmVlZGluZ0JpbmRpbmcgfHwgW10pO1xuICAgICAgICBqc29uUmVzdWx0ID0gYm9pbGVyUGxhdGVSZXN1bHQudG9Kc29uKCk7XG4gICAgfSkoKTtcbiAgICBjb25zb2xlLmxvZyhqc29uUmVzdWx0KTtcbiAgICBjb25zb2xlLmxvZyhKU09OLnBhcnNlKGNvbnRleHQuYm9pbGVyUGxhdGVKc29uKSk7XG4gICAgaXQoJ3Nob3VsZCBoYXZlIHRoZSBzYW1lIG5hbWUnLCAoKSA9PiBqc29uUmVzdWx0Lm5hbWUuc2hvdWxkLmVxdWFsKGJvaWxlclBsYXRlT2JqZWN0Lm5hbWUpKTtcbiAgICBpdCgnc2hvdWxkIGhhdmUgdGhlIHNhbWUgbGFuZ3VhZ2UnLCAoKSA9PiBqc29uUmVzdWx0Lmxhbmd1YWdlLnNob3VsZC5lcXVhbChib2lsZXJQbGF0ZU9iamVjdC5sYW5ndWFnZSkpO1xuICAgIGl0KCdzaG91bGQgaGF2ZSB0aGUgc2FtZSBkZXNjcmlwdGlvbicsICgpID0+IGpzb25SZXN1bHQuZGVzY3JpcHRpb24uc2hvdWxkLmVxdWFsKGJvaWxlclBsYXRlT2JqZWN0LmRlc2NyaXB0aW9uKSk7XG4gICAgaXQoJ3Nob3VsZCBoYXZlIHRoZSBzYW1lIHR5cGUnLCAoKSA9PiBqc29uUmVzdWx0LnR5cGUuc2hvdWxkLmVxdWFsKGJvaWxlclBsYXRlT2JqZWN0LnR5cGUpKTtcbiAgICBpdCgnc2hvdWxkIGhhdmUgdGhlIHNhbWUgZGVwZW5kZW5jaWVzJywgKCkgPT4ganNvblJlc3VsdC5kZXBlbmRlbmNpZXMuc2hvdWxkLmVxdWFsKGJvaWxlclBsYXRlT2JqZWN0LmRlcGVuZGVuY2llcykpO1xuICAgIGl0KCdzaG91bGQgaGF2ZSB0aGUgc2FtZSBsb2NhdGlvbicsICgpID0+IGpzb25SZXN1bHQubG9jYXRpb24uc2hvdWxkLmVxdWFsKGJvaWxlclBsYXRlT2JqZWN0LmxvY2F0aW9uKSk7XG4gICAgaXQoJ3Nob3VsZCBoYXZlIHRoZSBzYW1lIHBhdGhzTmVlZGluZ0JpbmRpbmcnLCAoKSA9PiBqc29uUmVzdWx0LnBhdGhzTmVlZGluZ0JpbmRpbmcuc2hvdWxkLmVxdWFsKGJvaWxlclBsYXRlT2JqZWN0LnBhdGhzTmVlZGluZ0JpbmRpbmcpKTtcbiAgICBpdCgnc2hvdWxkIGhhdmUgdGhlIHNhbWUgZmlsZXNOZWVkaW5nQmluZGluZycsICgpID0+IGpzb25SZXN1bHQuZmlsZXNOZWVkaW5nQmluZGluZy5zaG91bGQuZXF1YWwoYm9pbGVyUGxhdGVPYmplY3QuZmlsZXNOZWVkaW5nQmluZGluZykpO1xufSk7Il19